<?xml version="1.0" encoding="utf-8"?>

<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
    borderStyle="solid"
    horizontalScrollPolicy="off"
    backgroundAlpha="0" backgroundColor="#FF0000"> <!-- need a background color for drag and drop but can set alpha to 0 -->
    
    <mx:Metadata>
     [Event(name="editOper", type="dart.mashup.tile.TileOperListEvent")]
    </mx:Metadata>

    <mx:Script>
        <![CDATA[
        	import dart.mashup.tile.TileListEvent;
        	import dart.mashup.tile.TileOperListEvent;
        	import dart.mashup.tile.Service;
        	import dart.mashup.tile.Tile;
        import mx.core.*;
        import mx.effects.*;
        import mx.events.*;
        import mx.effects.EffectManager;
        
        public var items:Array = [];
        
        public var newItemStartX:int;
        public var newItemStartY:int;
        [Bindable]
        public var maxItems:int;
        public var showQuantity:Boolean;
        
        private var playingEffects:Dictionary = new Dictionary(true);
        
        public function addOper(s:Service):void
		{
            var index:int = indexOf(s.name);
            var event:TileOperListEvent;
            var item:TileOperListItem;
            
            if (index != -1)
			{
			    item = items[index] as TileOperListItem;
			    //if we don't keep track of what's playing a double-click can
			    //cause the list item to keep rising
			    if (playingEffects[item] == null)
			    {
                    var jump:Sequence = new Sequence();
                    var m1:Move = new Move(item)
                    m1.yBy = -5;
                    var m2:Move = new Move(item)
                    m2.yBy = 5;
                    jump.addChild(m1);
                    jump.addChild(m2);
                    jump.duration = 150;
                    playingEffects[item] = jump;
                    jump.addEventListener(EffectEvent.EFFECT_END, function(event:Event):void
                    {
                       delete playingEffects[item];
                    });
                    jump.play();
                }
            }
			else
			{
                index = items.length;
                if (maxItems <= 0 || index < maxItems)
				{
				    item = new TileOperListItem();
				    item.s = s;
				    item.percentWidth = 100;
				    item.addEventListener(TileOperListEvent.REMOVE_OPER, removeItemHandler);
				    item.addEventListener(TileOperListEvent.EDIT_OPER, editItemHandler);
                    items[index] = item;
                    addChild(item);
                    layoutItems(index, true);
                    event = new TileOperListEvent(TileOperListEvent.ADD_OPER);
                    event.service = s;
                    dispatchEvent(event);
                }
            }
        }
        
        public function getOper():Array
        {
            var ret:Array = [];
            for (var i:int = 0; i < items.length; i++)
            {
                ret[i] = items[i].s;
            }
            return ret;
        }
        
        private function removeItemHandler(event:Event):void
        {
            var item:TileOperListItem = event.target as TileOperListItem;
            var index:int = indexOf(item.s.name);
            items.splice(index, 1);
            removeChild(item);
            layoutItems(index);
        }
        
        private function editItemHandler(event:Event):void
        {
            var item:TileOperListItem = event.target as TileOperListItem;
            var index:int = indexOf(item.s.name);
            items.splice(index, 1);
            removeChild(item);
            layoutItems(index);
            var e:TileOperListEvent = new TileOperListEvent(TileOperListEvent.EDIT_OPER);
            e.service = item.s;
            dispatchEvent(e);
        }        
            
        private function layoutItems(startIndex:int, scrollToBottom:Boolean=false):void
		{
            var n:int = items.length;
            var e:Move;
			for (var i:int = startIndex; i < n ; i++)
			{
			    var item:TileOperListItem = items[i];
                var yTo:Number = i * (item.height);
                //still need to prevent items that are already in motion from getting
                //jumpy
			    if (playingEffects[item] == null)
			    {
                    e = new Move(item);
                    if (item.x == 0 && item.y == 0)
    				{
    					e.xFrom = newItemStartX;
    					e.yFrom = newItemStartY;
                    }
    
                    e.xTo = 0;
                    e.yTo = yTo;
                    playingEffects[item] = e;
                    e.addEventListener(EffectEvent.EFFECT_END, function(event:Event):void
                    {
                       delete playingEffects[item];
                    });
                    e.play();
                }
                else
                {
                    playingEffects[item].pause();
                    playingEffects[item].yTo = yTo;
                    playingEffects[item].play();
                }
            }
            //get the last event and if we should scroll make sure we can validate
            //and scroll to maxVPosition
            if (scrollToBottom)
            {
                e.addEventListener(EffectEvent.EFFECT_END, function(event:Event):void
                {
                    validateNow();
                    verticalScrollPosition = maxVerticalScrollPosition;    
                });
            }
        }
        
        private function indexOf(name:String):int
		{
            var index:int = -1;

            var n:int = items.length;
			for (var i:int = 0; i < items.length; i++)
			{
                if (items[i].s.name == name)
				{
                    index = i;
                    break;
                }
            }

            return index;
        }
 
        ]]>
    </mx:Script>
    
</mx:Canvas>

/* * Copyright (c) 2008 Nokia Corporation. */// This is called once in the beginning and when device rotates// Detects display dimensions and adjusts playheadfunction adjustLayout():Void {    if (Stage.width == 240) {        gotoAndStop("240x320");    } else if (Stage.width == 320) {        gotoAndStop("320x240");    } else if (Stage.width == 360) {        gotoAndStop("360x640");    } else if (Stage.width == 640) {        gotoAndStop("640x360");    } else if (Stage.width == 800) {		gotoAndStop("800x352");    } else if (Stage.width == 128) {        gotoAndStop("128x160");    } else {        //other screen sizes        if(Stage.width>Stage.height){            gotoAndStop("320x240");            }else{                gotoAndStop("240x320");            }    }}function hideLayoutPlaceholders():Void {    placeholder_heading._visible = false;    placeholder_board._visible = false; // board is the main grid    placeholder_gameinfo._visible = false;    placeholder_LSK._visible = false;	placeholder_LSK2._visible = false;    placeholder_RSK._visible = false;    placeholder_menu._visible = false;	placeholder_middlesk._visible=false    timer._visible=false}function resetComponents():Void {	grid.boardHighlight.gotoAndStop("INIT");}// Sets the position of the component movieclips according to placeholdersfunction placeComponents():Void {	    heading._x = placeholder_heading._x;    heading._y = placeholder_heading._y;	    mask._x = placeholder_board._x;    mask._y = placeholder_board._y;	    grid._x = placeholder_board._x;    grid._y = placeholder_board._y;    	boardHighlight._x = grid._x;    boardHighlight._y = grid._y;    		if(fscommand2("GetSoftKeyLocation") == 3) {		if(Stage.width == 320 || Stage.height == 360) {			LSK._x = placeholder_RSK._x;    		LSK._y = placeholder_RSK._y;			RSK._x = placeholder_LSK2._x;    		RSK._y = placeholder_LSK2._y;		} else {			LSK._x = placeholder_LSK2._x;    		LSK._y = placeholder_LSK2._y;			RSK._x = placeholder_RSK._x;    		RSK._y = placeholder_RSK._y;		}		setComponentLayout(_root.main.LSK, "RIGHT");	} else {		LSK._x = placeholder_LSK._x;    	LSK._y = placeholder_LSK._y;		RSK._x = placeholder_RSK._x;    	RSK._y = placeholder_RSK._y;		setComponentLayout(_root.main.LSK, "LEFT");	}    	gameinfo._x = placeholder_gameinfo._x;    gameinfo._y = placeholder_gameinfo._y;    	if (optionsMenuIsOn == true) {        optionsMenu._x = placeholder_menu._x;        optionsMenu._y = placeholder_menu._y;    }}function setComponentLayout(aComponent, aLayout):Void {	aComponent.gotoAndStop(aLayout);	_root.main.setSKLabels(_root.main.currentLSK, _root.main.currentRSK);}// Sets the width and scale of the movieclips// according to placeholdersfunction adjustComponents():Void {	heading._width = placeholder_heading._width;	heading._height = placeholder_heading._height;	grid._width = placeholder_board._width;	grid._height = placeholder_board._height;		if(fscommand2("GetSoftKeyLocation") == 3) {		LSK._width = placeholder_LSK2._width;		LSK._height = placeholder_LSK2._height;	} else {		LSK._width = placeholder_LSK._width;		LSK._height = placeholder_LSK._height;	}		RSK._width = placeholder_RSK._width;	RSK._height = placeholder_RSK._height;			gameinfo._width = placeholder_gameinfo._width;	gameinfo._height = placeholder_gameinfo._height;	if (optionsMenuIsOn) {        optionsMenu._width = placeholder_menu._width;        optionsMenu._height = placeholder_menu._height;    }		if( _root.main.winscreenIsOn ){        _root.main.Winscreen._x = Stage.width/2-(_root.main.Winscreen._width/2);        _root.main.Winscreen._y = Stage.height/2-(_root.main.Winscreen._height/2);        }}function initializeComponents():Void {	grid.boardHighlight.gotoAndStop("SHOW");	_root.main.currentCellWidth = _root.main.grid.grid1._width;}
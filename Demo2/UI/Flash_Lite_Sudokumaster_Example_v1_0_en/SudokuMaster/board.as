/* * Copyright (c) 2008 Nokia Corporation. */// Add boardHighlight, boardHighlight and mask to gridfunction addGridMask():Void{	attachMovie("boardHighlight", "boardHighlight", this.getNextHighestDepth());    attachMovie("mask", "masker", this.getNextHighestDepth());    boardHighlight.setMask(masker);}// Draw 81 cells to grid and assign cell variables to themfunction drawGrid(cell_size:Number) {    for (i=0; i<81; i++) {        attachMovie("Cell", "grid"+i, this.getNextHighestDepth());        this["grid"+i]._x = cell_size/2+i%9*cell_size;        this["grid"+i]._y = cell_size/2+Math.floor(i/9)*cell_size;        this["grid"+i].cellId = i;        this["grid"+i].cellValue = 0;        this["grid"+i].rowId = Math.floor(i/9);        this["grid"+i].columnId = i%9;        this["grid"+i].isInitialized = false;        this["grid"+i].userInput = false;    }}// Check repeat numbers in same row,same column and same cell group(3x3)// If there is no number repearted return false, else return truefunction checkResult(checkValue:Number, curRowId:Number, curColumnId:Number, resNumArray:Array):Boolean {    var flag:Boolean = false;    var checkRowResult:Boolean = false;    var checkColumnResult:Boolean = false;    var checkGroupResult:Boolean = false;    checkRowResult = checkRow(checkValue, curRowId, curColumnId, resNumArray);    checkColumnResult = checkColumn(checkValue, curRowId, curColumnId, resNumArray);    checkGroupResult = checkGridGroup(checkValue, curRowId, curColumnId, resNumArray);    if (checkRowResult or checkColumnResult or checkGroupResult) {        flag = true;    }    return flag;}// Check is there a repeat value in the same row after input,and put the repeated cell's colId and rowId in resultArray// if there is no number repearted return false,else returen truefunction checkRow(checkValue:Number, curRowId:Number, curColumnId:Number, resNumArray:Array):Boolean {    var flag:Boolean = false;    for (i=0; i<9; i++) {        if (_root.main.grid["grid"+(curRowId*9+i)].cellValue == checkValue) {            if (i != curColumnId) {                resNumArray.push(curRowId*9+i);                flag = true;            }        }    }    return flag;}// Check is there a repeat value in the same column after input,and put the repeated cell's colId and rowId in resultArray// If there is no number repearted return false,else returen truefunction checkColumn(checkValue:Number, curRowId:Number, curColumnId:Number, resNumArray:Array):Boolean {    var flag:Boolean = false;    for (i=0; i<9; i++) {        if (_root.main.grid["grid"+(i*9+curColumnId)].cellValue == checkValue) {            if (i != curRowId) {                resNumArray.push(i*9+curColumnId);                flag = true;            }        }    }    return flag;}// Check is there a repeat value in the same cellgroup(3x3) after input,and put the repeated cell's colId and rowId in resultArray// if there is no number repearted return false,else returen truefunction checkGridGroup(checkValue:Number, curRowId:Number, curColumnId:Number, resNumArray:Array):Boolean {    var flag:Boolean = false;    var gridGroupCellArray:Array = [];    var exceptCellId:Number = curRowId*9+curColumnId;    //determine which grids to check    if (curColumnId<=2 and curRowId<=2) {        //group0        gridGroupCellArray = [0, 1, 2, 9, 10, 11, 18, 19, 20];    } else if (curRowId<=2 and curColumnId<=5 and curColumnId>2) {        //group1        gridGroupCellArray = [3, 4, 5, 12, 13, 14, 21, 22, 23];    } else if (curRowId<=2 and curColumnId>5) {        //group2        gridGroupCellArray = [6, 7, 8, 15, 16, 17, 24, 25, 26];    } else if (curColumnId<=2 and curRowId<=5 and curRowId>2) {        //group3        gridGroupCellArray = [27, 28, 29, 36, 37, 38, 45, 46, 47];    } else if (curColumnId>2 and curColumnId<=5 and curRowId<=5 and curRowId>2) {        //group4        gridGroupCellArray = [30, 31, 32, 39, 40, 41, 48, 49, 50];    } else if (curColumnId>5 and curRowId<=5 and curRowId>2) {        //group5        gridGroupCellArray = [33, 34, 35, 42, 43, 44, 51, 52, 53];    } else if (curColumnId<=2 and curRowId>5) {        //group6        gridGroupCellArray = [54, 55, 56, 63, 64, 65, 72, 73, 74];    } else if (curColumnId>2 and curColumnId<=5 and curRowId>5) {        //group7        gridGroupCellArray = [57, 58, 59, 66, 67, 68, 75, 76, 77];    } else if (curColumnId>5 and curRowId>5) {        //group8        gridGroupCellArray = [60, 61, 62, 69, 70, 71, 78, 79, 80];    }    for (i=0; i<9; i++) {        if (_root.main.grid["grid"+(gridGroupCellArray[i])].cellValue == checkValue) {            if (gridGroupCellArray[i] != exceptCellId) {                resNumArray.push(gridGroupCellArray[i]);                flag = true;            }        }    }    return flag;}// Indicate those cells which is corrected in repeatCellArrayfunction markRepeatCells(repeatCellArray:Array):Void {    var cellId:Number;    while (repeatCellArray.length>0) {        cellId = int(repeatCellArray.pop());        _root.main.grid["grid"+cellId].gotoAndPlay("ERROR");    }}
/* * Copyright (c) 2008 Nokia Corporation. */// Listeners for key controls when user is navigating in gridvar gameKeyListener : Object;// Listeners for touch controls when user is navigating in gridvar gameMouseListener : Object;// Touch-and-hold is active if this is set to truevar isMouseDown : Boolean = false;// If user clicks area inside game grid (board), this is set to truevar isClickInside : Boolean = false;// Indicator for current listenervar currentKeyListener : Object = null;// Indicator for current mouse listenervar currentMouseListener : Object = null;// Indicator for current mouse SK listenervar currentSKMouseListener : Object = null;function loadKeyListener(aListener):Void {	if(_root.main.currentKeyListener != null) Key.removeListener(_root.main.currentKeyListener);	Key.addListener(aListener);	_root.main.currentKeyListener = aListener;}function loadMouseListener(aListener):Void {	if(_root.main.currentMouseListener != null) Mouse.removeListener(_root.main.currentMouseListener);	Mouse.addListener(aListener);	_root.main.currentMouseListener = aListener;}function loadSKMouseListener(aListener, aLSK, aRSK):Void {	if(_root.main.currentSKMouseListener != null) Mouse.removeListener(_root.main.currentSKMouseListener);	Mouse.addListener(aListener);	_root.main.currentSKMouseListener = aListener;	_root.main.setSKLabels(aLSK, aRSK);}// Stage Listeners ------------------------------------------------// Init size (orientation) change listenerfunction initSizeListener():Void {    // Add size listener    var sizeListener:Object = new Object();    sizeListener.onResize = function() {        //display correct layout according to screen size[layout.as]        adjustLayout();    };    Stage.addListener(sizeListener);}// Mouse Listeners ------------------------------------------------gameMouseListener = new Object();gameMouseListener.onMouseDown = function() {	if(_root.main.placeholder_board.hitTest(_root._xmouse, _root._ymouse)) {		mouseMoveCellFocus();	}};gameMouseListener.onMouseMove = function() {	if(_root.main.placeholder_board.hitTest(_root._xmouse, _root._ymouse)) {		mouseMoveCellFocus();	}};gameMouseListener.onMouseUp = function() {	if(_root.main.placeholder_board.hitTest(_root._xmouse, _root._ymouse)) {		popupSoftpad();	}};softpadMouseListener = new Object();softpadMouseListener.onMouseDown = function() {	_root.main.isMouseDown = true;	if(_root.main.grid.softpad.hitTest(_root._xmouse, _root._ymouse)) {		mouseMoveSoftFocus();	}};softpadMouseListener.onMouseMove = function() {	if(_root.main.grid.softpad.hitTest(_root._xmouse, _root._ymouse)) {		mouseMoveSoftFocus();	}};softpadMouseListener.onMouseUp = function() {	_root.main.isMouseDown = false;	if(_root.main.grid.softpad.hitTest(_root._xmouse, _root._ymouse)) {		hideSoftpad(true);	}};winMouseListener = new Object();winMouseListener.onMouseUp = function() {	if(_root.main.Winscreen.hitTest(_root._xmouse, _root._ymouse)) {		unloadWinscreen();	}};optionsMouseListener = new Object();optionsMouseListener.onMouseUp = function() {	if(optionsMenu.item1.hitTest(_root._xmouse, _root._ymouse, true)) {		_root.main.reset();		_root.main.closeOptionsMenu();	} else if(optionsMenu.item2.hitTest(_root._xmouse, _root._ymouse, true)) {		_root.main.newGame();		_root.main.closeOptionsMenu();	} else if(optionsMenu.item3.hitTest(_root._xmouse, _root._ymouse, true)) {		fscommand2("Quit");	}}// SK Mouse Listeners ------------------------------------------------gameSKMouseListener = new Object();gameSKMouseListener.onMouseUp = function() {	if(_root.main.LSK.hitTest(_root._xmouse, _root._ymouse)) {		displayOptionsMenu();	} else if(_root.main.RSK.hitTest(_root._xmouse, _root._ymouse)) {		fscommand2("Quit");	}};optionsSKMouseListener = new Object();optionsSKMouseListener.onMouseUp = function() {	if(_root.main.RSK.hitTest(_root._xmouse, _root._ymouse)) {		closeOptionsMenu();	}};softpadSKMouseListener = new Object();softpadSKMouseListener.onMouseUp = function() {	if(_root.main.RSK.hitTest(_root._xmouse, _root._ymouse)) {		hideSoftpad(false);	}};winSKMouseListener = new Object();winSKMouseListener.onMouseUp = function() {	if(_root.main.LSK.hitTest(_root._xmouse, _root._ymouse)) {		unloadWinscreen();	} else if(_root.main.RSK.hitTest(_root._xmouse, _root._ymouse)) {		fscommand2("Quit");	}};// Key Listeners ------------------------------------------------optionsKeyListener = new Object();optionsKeyListener.onKeyDown = function() {	switch (Key.getCode()) {		case Key.UP :			optionsMenu["item"+optionsMenu.options_focus].gotoAndPlay("PREV");			break;		case Key.DOWN :			optionsMenu["item"+optionsMenu.options_focus].gotoAndPlay("NEXT");			break;		case Key.ENTER :		case ExtendedKey.SOFT1 :			processOptionsSelection();			break;		case ExtendedKey.SOFT2 :			closeOptionsMenu();			break;		default :			break;    }};// Game Key ListenergameKeyListener = new Object();gameKeyListener.onKeyDown = function() {	switch (Key.getCode()) {    case Key.LEFT :        if (newCellColumn>0) {            newCellColumn--;        }else{            newCellColumn=8            }        updateCursorPosition();        break;    case Key.RIGHT :        if (newCellColumn<8) {            newCellColumn++;        }else{            newCellColumn=0            }        updateCursorPosition();        break;    case Key.UP :        if (newCellRow>0) {            newCellRow--;        }else{            newCellRow=8            }        updateCursorPosition();        break;    case Key.DOWN :        if (newCellRow<8) {            newCellRow++;        }else{            newCellRow=0            }        updateCursorPosition();        break;    case Key.ENTER :        popupSoftpad();        break;    case ExtendedKey.SOFT1 :        displayOptionsMenu();        break;    case ExtendedKey.SOFT2 :        fscommand2("Quit");        break;    case 48 :        if (!_root.main.grid["grid"+currentCellIndex].isInitialized) {			            writeValueToCell(10);        }        break;    case 49 :        //Num1 pressed        if (!_root.main.grid["grid"+currentCellIndex].isInitialized) {            writeValueToCell(1);        }        break;    case 50 :        if (!_root.main.grid["grid"+currentCellIndex].isInitialized) {            writeValueToCell(2);        }        break;    case 51 :        if (!_root.main.grid["grid"+currentCellIndex].isInitialized) {            writeValueToCell(3);        }        break;    case 52 :        if (!_root.main.grid["grid"+currentCellIndex].isInitialized) {            writeValueToCell(4);        }        break;    case 53 :        if (!_root.main.grid["grid"+currentCellIndex].isInitialized) {            writeValueToCell(5);        }        break;    case 54 :        if (!_root.main.grid["grid"+currentCellIndex].isInitialized) {            writeValueToCell(6);        }        break;    case 55 :        if (!_root.main.grid["grid"+currentCellIndex].isInitialized) {            writeValueToCell(7);        }        break;    case 56 :        if (!_root.main.grid["grid"+currentCellIndex].isInitialized) {            writeValueToCell(8);        }        break;    case 57 :        if (!_root.main.grid["grid"+currentCellIndex].isInitialized) {            writeValueToCell(9);        }        break;    default :        break;    }};// Softpad Key ListenersoftpadKeyListener = new Object();softpadKeyListener.onKeyDown = function() {	switch (Key.getCode()) {    case Key.LEFT :        if (newSoftPadKeyIndex>0) {            newSoftPadKeyIndex--;        } else {            newSoftPadKeyIndex = 9;        }        updateSoftFocusPosition();        break;    case Key.RIGHT :        if (newSoftPadKeyIndex<9) {            newSoftPadKeyIndex++;        } else {            newSoftPadKeyIndex = 0;        }        updateSoftFocusPosition();        break;    case Key.UP :        if (newSoftPadKeyIndex>2) {            newSoftPadKeyIndex -= 3;        } else {            newSoftPadKeyIndex = 9;        }        updateSoftFocusPosition();        break;    case Key.DOWN :        if (newSoftPadKeyIndex<6) {            newSoftPadKeyIndex += 3;        } else if (newSoftPadKeyIndex == 9) {            newSoftPadKeyIndex = 0;        } else {            newSoftPadKeyIndex = 9;        }        updateSoftFocusPosition();        break;	case ExtendedKey.SOFT1:    case Key.ENTER :        hideSoftpad(true);        break;    case ExtendedKey.SOFT2 :		hideSoftpad(false);        break;    }};var winKeyListener:Object = new Object();winKeyListener.onKeyDown = function() {	switch (Key.getCode()) {		case ExtendedKey.SOFT1 :			unloadWinscreen();			break;		case ExtendedKey.SOFT2 :			fscommand2("Quit");			break;	}};